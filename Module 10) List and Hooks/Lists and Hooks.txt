There are two types of components:

Class Based Components:- A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, 
				 and gives your component access to React.Component's functions.
	

Function Based Components:- A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can 
				    be written using much less code, are easier to understand.

A React component undergoes three phases in its lifecycle: mounting, updating, and unmounting.

1. The mounting phase is when a new component is created and inserted into the DOM or, in other words, when the life of a
   component begins. This can only happen once, and is often called “initial render.”
	
React has four built-in methods that gets called, in this order, when mounting a component:

  I).	constructor()
 II).	getDerivedStateFromProps()
III).	render()
 IV).	componentDidMount()


2. The updating phase is when the component updates or re-renders. This reaction is triggered when the props are updated 
   or when the state is updated. This phase can occur multiple times, which is kind of the point of React.
React has five built-in methods that gets called, in this order, when a component is updated:

  I). getDerivedStateFromProps()
 II). shouldComponentUpdate()
III). render()
 IV). getSnapshotBeforeUpdate()
  V). componentDidUpdate()

3. The last phase within a component's lifecycle is the unmounting phase, when the component is removed from the DOM.

React has only one built-in method that gets called when a component is unmounted:

  I). componentWillUnmount()

Hooks:-


	Hooks were added to React in version 16.8. Hooks let you use state and other React features without writing a class.

	Although states have largely replaced classes in React, there is no plan of removing classes from React. 



	Things you need to keep in mind while using hooks:

	You must import hook first
	You must import it from react
	Hooks can only be called in React Function Components, meaning:

	Hooks cannot be conditional
	Hooks cannot work in React Class Components
	Hooks can only be called at the top level of a component, meaning it can't be called from inside a block,
 	i.e. {}. So, can't be called inside if, loops or any block, example: