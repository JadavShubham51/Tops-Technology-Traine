1) install app in vite 
2) install react-reduc
3) install to react-toolkit

4) app/store.js 
    import { configureStore } from "@reduxjs/toolkit";

    export const store = configureStore({
        reducer:{
            
        }
    })

5) main.jsx or index.js 
    import { store } from './app/store.js'
    import { Provider } from 'react-redux'

    ReactDOM.createRoot(document.getElementById('root')).render(
    <Provider store={store}>
        <App />
    </Provider>
    )

6) How to created json server use for api
    step:1 npm install -g json-server
    step:2 created db.json file
        {
            "users":[
                {
                    "id":"1",
                    "name":"shubham",
                    "email":"shubhamjadav.tops@gmail.com",
                    "phone":"8775674764",
                    "password":"1234"
                },
                {
                    "id":"2",
                    "name":"shubham1",
                    "email":"shubhamjadav1.tops@gmail.com",
                    "phone":"8775674764",
                    "password":"12345"
                },
            ]
        }

    step3: package.json 
    "server":"json-server --watch db.json --port 3000"

    step4: cmd oppen 
    cmd -> npx json-server --watch db.json

7) next to Creted userSlice 
import { createSlice } from "@reduxjs/toolkit";


export const userDetails= createSlice({
    name:"userDetail",
    initialState:{
        users:[],
        loading:false,
        error:null
    },
    reducers:{
        // Define your reducers using the builder callback
        userPending :(state)=>{
            state.loading = true;
        },
        userFullfilled : (state,action)=>{
            state.loading = false;
            // Append new User to the user array
            state.users.push(action.payload);
        },
        userRejected:(state,action)=>{
            state.loading = false;
            state.error = action.payload;
        }
    },
    // use extrReducers field directly
    extraReducers:(builder)=>{

    },
})

export const{userPending, userFullfilled, userRejected} = userDetails.actions;

export default userDetails.reducer;

8) and next react-router-dom install 
 npm i react-router-document

9) component created Navabr and creted 

10) creaeted in 
import React, { useState } from 'react'

function Create() {

    const [users,setusers] = useState({})


    const getuserdata=(e)=>{
        setusers({...users,
            id:new Date().getTime().toString()
            ,[e.target.name]:e.target.value});
        console.log(users)
    }


  return (
    <div>
       <div className="container">
        <h2 className="my-2">Fill The data</h2>
        <form className="w-50 mx-auto my-5" >
          <div className="mb-3">
            <label className="form-label">Name</label>
            <input
              name="name"
              onChange={getuserdata}
              placeholder="Enter your name"
              type="text"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Email address</label>
            <input
              name="email"
              onChange={getuserdata}
              placeholder="Enter your email"
              type="email"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Phone</label>
            <input
              name="phone"
              onChange={getuserdata}
              placeholder="Enter your Age"
              type="text"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input
              name="password"
              onChange={getuserdata}
              placeholder="Enter your Age"
              type="password"
              className="form-control"
            />
          </div>
          <div>
            <div className="mb-3">
              <input
                value="male"
                onChange={getuserdata}
                name="gender"
                className="form-check-input"
                type="radio"
              />
              <label className="form-check-label">Male</label>
            </div>
            <div className="mb-3">
              <input
                value="female"
                onChange={getuserdata}
                name="gender"
                className="form-check-input"
                type="radio"
              />
              <label className="form-check-label">Female</label>
            </div>
          </div>

          <button type="submit" className="btn btn-primary">
            Submit
          </button>
        </form>
      </div>
    </div>
  )
}

export default Create

11) npm i axios / fetch api

11) Userslice in creted user 
// promise pending,fullfield,reject handel karna padata he

// creted funtion

export const createUser = createAsyncThunk(
    "createUser",
    async(data,{ rejectWithValue})=>{
        const res = await axios.post(`http://localhost:3000/users`,data)
        try {
            const respos = await res.data;
            return respos
        }
        catch(error){
            return rejectWithValue(error.respos)
        }
    }
)
 after that
 extraReducers:(builder)=>{
        builder
        // add data by post
        .addCase(createUser.pending,(state)=>{
            state.loading= true;
        })
        .addCase(createUser.fulfilled, (state,action) =>{
            state.loading = false;
            state.users.push(action.payload)
        })
        .addCase(createUser.rejected, (state,action)=>{
            state.loading = false;
            state.error = action.payload;
        })

    },


// after that creted submit from 

// asythunk use thase data pass
    const dispatch = useDispatch();

 const handleSubmit=(e)=>{
        e.preventDefault()
        console.log("Users...",users)
        dispatch(createUser(users))
    }

// read function
export const showuser = createAsyncThunk(
    "showUser",async(argu,{rejectWithValue}) =>{
        const resp = await axios.get(`http://localhost:3000/users`);
        try {
            const response = resp.data;
        return response
        } catch (error) {
            return rejectWithValue(error)
        } 
    }
)


read.jsx
const dispatch = useDispatch();

  const { users, loading } = useSelector((state) => state.app);

  useEffect(() => {
    dispatch(showuser());
  }, []);


  {users &&
              users.map((data) => {
                return (
                  <tr key={data.id}>
                    <th scope="row">{data.id}</th>
                    <td>{data.name}</td>
                    <td>{data.email}</td>
                    <td>{data.phone}</td>
                    <td>
                        <button className="btn btn-success">View</button>
                        <button className="btn btn-danger mx-2" onClick={()=>dispatch(deleteUser(data.id))}>Delete</button>
                        <button className="btn btn-primary">Edit</button>
                    </td>
                  </tr>
                );
              })}


delete funtion
// delete funtion

export const deleteUser = createAsyncThunk(
    "deleteuser",async(id,{rejectWithValue})=>{
        const res = await axios.delete(`http://localhost:3000/users/${id}`)
        try {
            const respo = await res.data
            return respo
        } catch (error) {
            return rejectWithValue(error);
        }
    }
)
  // delete funtion
        .addCase(deleteUser.pending,(state)=>{
            state.loading = true;
        })
        .addCase(deleteUser.fulfilled,(state,action)=>{
            state.loading = false;

            const {id} = action.payload;

            if(id)
                {
                    state.users = state.users.filter((data)=>data.id !== id)
                }
        })
        .addCase(deleteUser.rejected, (state,action)=>{
            state.loading = false;
            state.error = action.payload
        })

// update function
export const updateUser = createAsyncThunk(
    "updateUser",async (data,{rejectWithValue})=>{
        console.log("udapate data",data);
        const respo = await axios.put(`http://localhost:3000/users/${data.id}`,data)

        try {
            const result = await respo.data;
            return result;
        } catch (error) {
            return rejectWithValue(error)
        }
    }
)


        // update data
        .addCase(updateUser.pending ,(state)=>{
            state.loading = true;
        })
        .addCase(updateUser.fulfilled, (state,action)=>{
            state.loading = false;
            state.users = state.users.map((ele)=>(
                ele.id === action.payload.id ? action.payload : ele
            ))
        })
        .addCase(updateUser.rejected, (state,action)=>{
            state.loading = false;
            state.error = action.payload;
        })

read :- <NavLink  to={`/edit/${data.id}`} className="btn btn-primary">Edit</NavLink>
import React, { useEffect, useState } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate, useParams } from 'react-router-dom'
import { updateUser } from '../feature/userDetails'

function Update() {

    const {id} = useParams()

    const dispatch = useDispatch()
    const navigate = useNavigate()


    const alluser =  useSelector((state)=>state.app.users)

    const [updatadata,setupdatedata]=useState();

    const getchange=(e)=>{
        setupdatedata({...updatadata,[e.target.name]:e.target.value})
        console.log(updatadata)
    }

    useEffect(()=>{
        if(id){

            const singleuser = alluser.filter((ele)=>ele.id === id);
            setupdatedata(singleuser[0])
        }
    },[])

    const handleupdate=(e)=>{
        e.preventDefault();

        dispatch(updateUser(updatadata))
        navigate("/read")
    }

  return (
    <div>
      <div className="container">
        <h2 className="my-2 bg-success">Update data</h2>
        <form className="w-50 mx-auto my-5" onSubmit={handleupdate}>
          <div className="mb-3">
            <label className="form-label">Name</label>
            <input
              name="name"
              value={updatadata && updatadata.name}
              onChange={getchange}
              placeholder="Enter your name"
              type="text"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Email address</label>
            <input
              name="email"
              onChange={getchange}
              value={updatadata && updatadata.email}
              placeholder="Enter your email"
              type="email"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Phone</label>
            <input
              name="phone"
              onChange={getchange}
              value={updatadata && updatadata.phone}
              placeholder="Enter your Age"
              type="text"
              className="form-control"
            />
          </div>
          <div className="mb-3">
            <label className="form-label">Password</label>
            <input
              name="password"
              onChange={getchange}
              value={updatadata && updatadata.password}
              placeholder="Enter your Age"
              type="password"
              className="form-control"
            />
          </div>
          <div>
            <div className="mb-3">
              <input
                value="male"
                onChange={getchange}
                checked = {updatadata && updatadata.gender === 'male'}
                name="gender"
                className="form-check-input"
                type="radio"
              />
              <label className="form-check-label">Male</label>
            </div>
            <div className="mb-3">
              <input
                value="female"
                onChange={getchange}
                checked = {updatadata && updatadata.gender === "female"}
                name="gender"
                className="form-check-input"
                type="radio"
              />
              <label className="form-check-label">Female</label>
            </div>
          </div>

          <button type="submit" className="btn btn-primary">
            Submit
          </button>
        </form>
      </div>
    </div>
  )
}

export default Update
